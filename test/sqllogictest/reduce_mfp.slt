# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

#
# Test proper fusion of MFPs in Reduce.
# PR https://github.com/MaterializeInc/materialize/pull/23197
#

statement ok
CREATE TABLE t (a int, b int);

statement ok
INSERT INTO t VALUES (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (3, 1);

# Illustrates a complex MFP scenario with all three components
# active in the fused MFP.
statement ok
CREATE MATERIALIZED VIEW mv_complex_mfp_accumulable AS
SELECT a, SUM(b) + 1
FROM t
GROUP BY a
HAVING ((COUNT(b) + 1) - a) > 2 AND (COUNT(b) + 1) / (1 + a) >= 1;

query II
SELECT * FROM mv_complex_mfp_accumulable;
----
1
7

query T multiline
EXPLAIN PHYSICAL PLAN FOR
MATERIALIZED VIEW mv_complex_mfp_accumulable;
----
materialize.public.mv_complex_mfp_accumulable:
  Mfp
    project=(#0, #3)
    map=((#1 + 1))
    input_key=#0
    Reduce::Accumulable
      simple_aggrs[0]=(0, 0, sum(#1))
      simple_aggrs[1]=(1, 1, count(#1))
      val_plan
        project=(#1, #1)
      key_plan
        project=(#0)
      mfp_after
        filter=(((#3 - integer_to_bigint(#0)) > 2) AND ((#3 / integer_to_bigint((1 + #0))) >= 1))
        map=((#2 + 1))
      Get::PassArrangements materialize.public.t
        raw=true

EOF
